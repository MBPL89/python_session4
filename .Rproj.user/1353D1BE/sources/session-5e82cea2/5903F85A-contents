---
title: "2. Beyond the Basic: Conditional and Iterations"
author: "Dr. Piccoli"
format: live-html
pyodide:
  packages:
    - seaborn
editor_options: 
  chunk_output_type: console
---

```{=html}
<style>
/* Target the first tab (Demo) */
.nav-pills .nav-item:nth-child(1) .nav-link {
  background-color: #FFC20A; /* Yellow */
  color: white;
}

/* Target the second tab (Example) */
.nav-pills .nav-item:nth-child(2) .nav-link {
  background-color: #5D3A9B; /* Purple */
  color: white;
}

/* Target the third tab (Exercise) */
.nav-pills .nav-item:nth-child(3) .nav-link {
  background-color: #0C7BDC; /* Blue */
  color: white;
}

/* Target the fourth tab (Activity) */
.nav-pills .nav-item:nth-child(4) .nav-link {
  background-color: #E66100; /* Orange */
  color: white;
}

/* Target the fifth tab (Activity2) */
.nav-pills .nav-item:nth-child(5) .nav-link {
  background-color: #40B0A6; /* teal */
  color: white;
}

/* Active tab styling */
.nav-pills .nav-link.active {
  background-color: #2E7D32; /* Customize active tab color */
  color: white;
}
</style>
```

{{< include ./_extensions/r-wasm/live/_knitr.qmd >}} {{< include ./_extensions/r-wasm/live/_gradethis.qmd >}}

```{pyodide}
#| autorun: true
#| startover: false
#| edit: false
#| runbutton: false
#| echo: false
import sys
from io import StringIO

```


# 3. Conditional operations

In this part of the course we will leverage the following resources:

-   [Intro to Python book](https://automatetheboringstuff.com)

```{=html}
<style>
  /* Fix the custom timer div to the top-right corner */
  #custom-timer {
    position: fixed;    /* Ensure the timer stays fixed when scrolling */
    top: 70px;          /* Distance from the top */
    right: 10px;        /* Distance from the right */
    font-size: 1rem;   /* Small font size */
    z-index: 9999;       /* Ensure it stays on top of other elements */
    width: 250px;        /* Set a small width for the timer */
    text-align: center;  /* Center the text */
  }
</style>
```

Run the expressions below and compare the outputs.

```{pyodide}
#| autorun: false
#| startover: false
#| min-lines: 3
#| completion: true

5 == 5

```

```{pyodide}
#| autorun: false
#| startover: false
#| min-lines: 3
#| completion: true
5 == 6

```

A boolean expression is an expression that is either true or false. True and False are special values that belong to the class bool; they are not strings.

Below is the list of all the comparison operators:

```{raw}         
x == y               # x is equal to y
x != y               # x is not equal to y
x > y                # x is greater than y
x < y                # x is less than y
x >= y               # x is greater than or equal to y
x <= y               # x is less than or equal to y
x is y               # x is the same as y. Only use to check if two variables are the same (not if they have the same value). Also most useful to verify if a variable is True, False or None.
x is not y           # x is not the same as y
```

::: callout-warning
Attention!!! Do not confuse `=` (assignment operator) with `==` (comparison operator)
:::

```{pyodide}
#| autorun: false
#| startover: false
#| min-lines: 3
#| completion: true
x = 1

```

```{pyodide}
#| autorun: false
#| startover: false
#| min-lines: 3
#| completion: true
x == 1

```

## Logical operators

There are three logical operators: and, or, and not. The semantics (meaning) of these operators is similar to their meaning in English. For example,

`x > 0` and `x < 10` is true only if x is greater than 0 **and** less than 10.

`n%2 == 0` or `n%3 == 0` is true if **either of the conditions is true**, that is, if the number is divisible by 2 or 3.

Finally, the `not` operator negates a boolean expression, so `not(x > y)` is true if `x > y` is false; that is, if `x` is less than or equal to `y`.

```{pyodide}
#| autorun: false
#| startover: false
#| min-lines: 3
#| completion: true
x = 5
y = 10
z = 8

```

```{pyodide}
#| autorun: false
#| startover: false
#| min-lines: 3
#| completion: true
x >= 0 and y == 10

```

```{pyodide}
#| autorun: false
#| startover: false
#| min-lines: 3
#| completion: true
q = x >= 0 and y == 10
print(q)
q is not True
```

```{pyodide}
#| autorun: false
#| startover: false
#| min-lines: 3
#| completion: true
not(x > y)
```

## Conditional execution: `if`

In order to write useful programs, we almost always need the ability to check conditions and change the behavior of the program accordingly. If the logical condition is true, then the indented statement gets executed. If the logical condition is false, the indented statement is skipped.

```{raw}         
if condition is True :
    do the magic here
```

```{pyodide}
#| autorun: false
#| startover: false
#| min-lines: 3
#| completion: true
if 2 == 2 :
    print('Genius!')

```

::: callout-important
**PAY ATTENTION TO INTENDATION!!!**\
Luckily Python keeps the right intendention for you but be extra careful when writing longer scripts.
:::

Print `Correct` if `y` is higher than 5

```{pyodide}
#| autorun: false
#| startover: false
#| min-lines: 3
#| completion: true
x = 5
y = 10

# Type your code here

```

There is no limit on the number of statements that can appear in the body, but there must be at least one. Occasionally, it is useful to have a body with no statements (usually as a place holder for code you haven't written yet). In that case, you can use the pass statement, which does nothing.

```{pyodide}
#| autorun: false
#| startover: false
#| min-lines: 3
#| completion: true

if x == 5 :
    pass   
```

## Alternative execution: `if else`

A second form of the if statement is alternative execution, in which there are two possibilities and the condition determines which one gets executed.

```{raw}         
if condition is True :
    do the magic here
else :
    do the other magic here
```

Print "Correct" if y is higher than 5. Otherwise, print "Incorrect".

```{pyodide}
#| autorun: false
#| startover: false
#| min-lines: 3
#| completion: true
x = 5
y = 10
y = x

# Type your code here

```

## Chained conditionals `if elif else`

Sometimes there are more than two possibilities and we need more than two branches. One way to express a computation like that is a chained conditional:

```{raw}         
if condition is True :
    do the magic here
elif other conditon is True :
    do the other magic here
else :
    do some other stuff
```

```{pyodide}
#| autorun: false
#| startover: false
#| min-lines: 3
#| completion: true

if x < y:
    print('x is less than y')
elif x > y:
    print('x is greater than y')
else:
    print('x and y are equal')
```

There is no limit on the number of elif statements. If there is an else clause, it has to be at the end, but there doesn't have to be one.

```{pyodide}
#| autorun: false
#| startover: false
#| min-lines: 3
#| completion: true
if x < y:
    print('x is less than y')
elif x > y:
    print('x is greater than y')
elif x == y: # <- pay attention here 
    print('x and y are equal')

```

## Nested conditionals

One conditional can also be nested within another. We could have written the three-branch example like this:

```{raw}         
if condition is True :
    do the magic here
else :
    if nested condition is True :
        do the other magic here
    else :
        do some other stuff
```

The outer conditional contains two branches. The first branch contains a simple statement. The second branch contains another if statement, which has two branches of its own.

```{pyodide}
#| autorun: false
#| startover: false
#| min-lines: 3
#| completion: true
if x == y:
    print('x and y are equal')
else:
    if x < y:
        print('x is less than y')
    else:
        print('x is greater than y')

```

## Exceptions: `try` and `except`

Consider the following code:

```{pyodide}
#| autorun: false
#| min-lines: 3
mock_input = StringIO("...\n")
sys.stdin = mock_input
```

```{pyodide}
#| autorun: false
#| startover: false
#| min-lines: 3
#| completion: true

inp = input('Enter Fahrenheit Temperature: ')
fahr = float(inp)
cel = (fahr - 32.0) * 5.0 / 9.0
print(cel)
```

It is pretty simple. It just asks the user to type the temperature in Fahrenheit degrees and changes it to Celsius degrees.

But what happens if you type anything else than a numeber? For example, `sixty` instead of `60`?

There is a conditional execution structure built into Python to handle these types of expected and unexpected errors called "try / except". The idea of `try` and `except` is that you know that some sequence of instruction(s) may have a problem and you want to add some statements to be executed if an error occurs. These extra statements (the except block) are ignored if there is no error.

```{raw}       
try:

    [the code you want to run]

except:

    [the code that will run if the one above does not work]
```

Try to rewrite the code above using the `try` and `except`. Make sure that your code prints `Please enter a number` if the user types something else than a number.

```{pyodide}
#| autorun: false
#| min-lines: 3
mock_input = StringIO("...\n")
sys.stdin = mock_input
```

```{pyodide}
#| autorun: false
#| startover: false
#| min-lines: 3
#| completion: true
inp = input('Enter Fahrenheit Temperature: ')
try:
    
    
    
except:

```

# 4. Iterations

## `while` loops

Computers are often used to automate repetitive tasks. Repeating identical or similar tasks without making errors is something that computers do well and people do poorly.

One form of iteration in Python is the while statement.

Here is a simple program that counts down from five and then says "Blastoff!".

```{pyodide}
#| autorun: false
#| startover: false
#| min-lines: 3
#| completion: true
n = 5
while n > 0:
    print(n)
    n = n - 1
print('Blastoff!')

```

The flow of execution for a while statement is as follows:

1.  Evaluate the condition, yielding True or False.

2.  If the condition is false, exit the while statement and continue execution at the next statement.

3.  If the condition is true, execute the body and then go back to step 1.

This type of flow is called a **loop** because the third step loops back around to the top. We call each time we execute the body of the loop an **iteration**. The loop above has five iterations.

The body of the loop should change the value of one or more variables so that eventually the condition becomes false and the loop terminates. We call the variable that changes with each iteration the **iteration variable**.

If there is no iteration variable, the loop will repeat forever, resulting in an infinite loop.

### `break`

The loop below an infinite loop because the logical expression on the while statement is simply the logical constant True:

```{raw}         
n = 10
while True:
    print(n, end=' ')
    n = n - 1
print('Done!')
```

However, we can still use this pattern to build a useful loops as long as we add `break` to the body of the loop. It literally breaks the loop when we have reached the exit condition.

For example, the loop below will run until the user types `done` in the prompt.

```{pyodide}
#| autorun: false
#| min-lines: 3
mock_input = StringIO("...\n...\n...\n...\n")
sys.stdin = mock_input
```

```{pyodide}
#| autorun: false
#| startover: false
#| min-lines: 3
#| completion: true
while True:
    line = input('> ')
    if line == 'done':
        break
    print(line)
print('Done!')

```

### `continue`

Sometimes you are in an iteration of a loop and want to finish the current iteration and immediately jump to the next iteration. In that case you can use the continue statement to skip to the next iteration without finishing the body of the loop for the current iteration.

Here is an extension of the previous code that copies its input until the user types "done", but treats lines that start with the hash character as lines not to be printed (like Python comments). Try to run it.

```{pyodide}
#| autorun: false
#| min-lines: 3
mock_input = StringIO("...\n...\n...\n...\n")
sys.stdin = mock_input
```

```{pyodide}
#| autorun: false
#| startover: false
#| min-lines: 3
#| completion: true
while True:
    line = input('> ')
    if line[0] == '#':
        continue
    if line == 'done':
        break
    print(line)
print('Done!')

```

All the lines are printed except the one that starts with the hash sign because when the continue is executed, it ends the current iteration and jumps back to the while statement to start the next iteration, thus skipping the print statement.

### `for` loops

When we want to loop through a set of things such as a list of words, the lines in a file, or a list of numbers. When we have such a list of things to loop through, we can construct another type of loop using a `for` statement.\
We call the `while` statement an `indefinite` loop - it simply loops until some condition becomes False.\
We call the `for` loop a `definite` loop - it is loops through a known set of items so it runs through as many iterations as there are items in the set. Once it arrives to the end of the set, it stops.

```{pyodide}
#| autorun: false
#| startover: false
#| min-lines: 3
#| completion: true
friends = ['Rachel','Monica','Phoebe','Joey', 'Ross', 'Chandler']
for friend in friends:
    print('Hello ', friend)
print('Done!')

```

`friends` is a list - a set of three strings (we will talk about lists next week).

The `for` loop goes through the list and executes the body once for each of the elements in the list.

`for` and `in` are reserved words

`friend` is the iteration variable - it changes for each iteration of the loop

## Loop paterns

Often we use a `for` or `while` loop to go through a list of items or the contents of a file and we are looking for something such as the largest or smallest value of the data we scan through.

Loops are generally constructed according to this paterrn:

```{raw}         
1. Initialize one or more variables before the loop starts

2. Perform some computation on each item in the loop body 
    a. possibly change the variables in the body of the loop

3. Look at the resulting variables when the loop completes
```

For example, a simple loop counting elements of a list would look like this:

```{pyodide}
#| autorun: false
#| startover: false
#| min-lines: 3
#| completion: true
# 1. Initialize one or more variables before the loop starts
count = 0

# 2. Perform some computation on each item in the loop body
for itervar in [3, 41, 12, 9, 74, 15]:
    # 2a. possibly change the variables in the body of the loop
    count = count + 1
    
# 3. Look at the resulting variables when the loop completes
print('Count: ', count)

```

```{pyodide}
#| autorun: false
#| startover: false
#| min-lines: 3
#| completion: true
#Extra practice chunk

```


::: disclaimer
<p><strong>Images and GIFs Disclaimer:</strong> Some of the images and GIFs used on this website are not owned by me. They are used for educational and illustrative purposes only. All rights belong to their respective owners. If you believe any content violates copyright, please contact me for prompt removal.</p>
:::

```{=html}
<style>
.disclaimer {
  font-size: 0.8em;
  color: #666;
  border-top: 1px solid #ddd;
  padding-top: 10px;
  margin-top: 20px;
}
</style>
```

```{=html}
<div>
  {{< include footer.html >}}
</div>
```
