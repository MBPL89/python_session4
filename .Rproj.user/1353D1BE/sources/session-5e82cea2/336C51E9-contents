---
title: 5. Functions
jupyter: python3
---



## Definition

In the context of programming, a function is a named sequence of statements that performs a computation. When you define a function, you specify the name and the sequence of statements.

In the example below:  
- the statement is **function definition**
- **def** is a kyeword used to build a new function (see **Building your own functions** below)  
- **thing** is a function name  
- the block after : is the sequence of statements that function *thing()* performs

```{pyodide}
def thing():
    print('Hello')
    print('Fun')
```

Later, you can "call" the function by name.

```{pyodide}
thing()
print('Zip')
thing()
```

## Built-in functions

Python provides a number of important built-in functions that we can use without needing to provide the function definition. We have already seen some of these functions before:

```{pyodide}
help(print)
print("Hello world")
float("123")
```

\*The expression in parentheses is called the **argument** of the function.

### Some useful built-in functions you should (probably) remember

- **max** and **min** returns the largest and the smallest values in a list

```{pyodide}
max([1,2,3,5])
```

```{pyodide}
min([1,2,3,5])
```

- **len** returns the number of items in its argument

```{pyodide}
len([1,2,3,5])
```

- **int**, **float**, and **str** are type conversion functions - they convert values from one type to another.

```{pyodide}
int("32")
```

```{pyodide}
int(3.999)
```

```{pyodide}
float("32")
```

```{pyodide}
float(32)
```

```{pyodide}
str(32)
```

## Building your own functions

- We create a new function using the def keyword followed by optional parameters in parentheses. 
- We indent the body of the function (as we did in the conditials or itrations).

```{pyodide}
def print_lyrics():
    print("I'm a lumberjack, and I'm okay.")
    print('I sleep all night and I work all day.')   
```

**This defines the function but does not execute the body of the function.**  
To call the function, you have to use its name.

```{pyodide}
print_lyrics()
```

After you define the funtion, you can use your function later in as many places as you want. 

```{pyodide}
def repeat_lyrics():
    print_lyrics()
    print_lyrics()
    
repeat_lyrics()
```

## Paramters and arguments

Some of the built-in functions we have seen require arguments.

Inside the function, the arguments are assigned to variables called parameters. 

```{pyodide}
def print_twice(xyz):
    print(xyz)
    print(xyz)
```

This function assigns the argument to a parameter named xyz. When the function is called, it prints the value of the parameter (whatever it is) twice.

```{pyodide}
print_twice('Spam')
print_twice(17)
```

Some of the functions yield results. We can call them *fruitful functions* (for the lack of better name). Other functions, like print_twice, perform an action but don't return a value. They are called void functions.

When you call a fruitful function, you almost always want to do something with the result; for example, you might assign it to a variable or use it as part of an expression:

```{pyodide}
x = max(1,48,59,2,38,99,100)
```

```{pyodide}
print(x)
```

Keep in mind that if you call a function in interactive notebook, Python displays the result. If you use it in a script (e.g. on your local machine, it will not display anyting).

```{pyodide}
max(1,48,59,2,38,99,100)
```

Void functions might display something on the screen or have some other effect, but they don't have a return value.  

If you try to assign the result to a variable, you get a special value called *None*.

```{pyodide}
result = print_twice('Bingo')
```

```{pyodide}
print(result)
```

