{"title":"4. Strings","markdown":{"yaml":{"title":"4. Strings","author":"Dr. Piccoli","format":"live-html","pyodide":{"packages":["seaborn"]},"editor_options":{"chunk_output_type":"console"}},"headingText":"4. Strings","containsRefs":false,"markdown":"\n\n```{=html}\n<style>\n/* Target the first tab (Demo) */\n.nav-pills .nav-item:nth-child(1) .nav-link {\n  background-color: #FFC20A; /* Yellow */\n  color: white;\n}\n\n/* Target the second tab (Example) */\n.nav-pills .nav-item:nth-child(2) .nav-link {\n  background-color: #5D3A9B; /* Purple */\n  color: white;\n}\n\n/* Target the third tab (Exercise) */\n.nav-pills .nav-item:nth-child(3) .nav-link {\n  background-color: #0C7BDC; /* Blue */\n  color: white;\n}\n\n/* Target the fourth tab (Activity) */\n.nav-pills .nav-item:nth-child(4) .nav-link {\n  background-color: #E66100; /* Orange */\n  color: white;\n}\n\n/* Target the fifth tab (Activity2) */\n.nav-pills .nav-item:nth-child(5) .nav-link {\n  background-color: #40B0A6; /* teal */\n  color: white;\n}\n\n/* Active tab styling */\n.nav-pills .nav-link.active {\n  background-color: #2E7D32; /* Customize active tab color */\n  color: white;\n}\n</style>\n```\n\n{{< include ./_extensions/r-wasm/live/_knitr.qmd >}} {{< include ./_extensions/r-wasm/live/_gradethis.qmd >}}\n\n```{pyodide}\n#| autorun: true\n#| startover: false\n#| edit: false\n#| runbutton: false\n#| echo: false\nimport sys\nfrom io import StringIO\n\n```\n\n\nA string is a sequence of characters. You can access the characters one at a time with the bracket operator:\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nfruit = 'banana'\nletter = fruit[1]\n```\n\nThe expression in brackets is called an **index**.\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nprint(letter)\n```\n\nKeep in mind that in Python, the index is an offset from the beginning of the string, and the offset of the first letter is zero.  \n\n::: {.callout-warning} \nRemember that the value of the index has to be an integer!\n:::\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nletter = fruit[1.5]\n```\n\n## Length of strings\n\nTo get a length of a string, you can use function len()\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nlen(fruit)\n```\n\nTo find the last element of a sequence, remember about starting from 0!!!\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nlength = len(fruit)\n\nlastWrong = fruit[length] \n```\n\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nlastCorrect = fruit[length-1] \n\nprint(lastCorrect)\n```\n\n## String slices\n\nA segment of a string is called a slice. Selecting a slice is similar to selecting a character:\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nprint(fruit[3:6])\n```\n\nIf you omit the first index (before the colon), the slice starts at the beginning of the string. If you omit the second index, the slice goes to the end of the string:\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nfruit[:3]\n```\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nfruit[3:]\n```\n\nIf the first index is greater than or equal to the second the result is an empty string, represented by two quotation marks:\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nfruit[3:3]\n```\n\n## String comparison\n\nThe word `in` is a boolean operator that takes two strings and returns True if the first appears as a substring in the second:\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n'a' in 'banana'\n```\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n'seed' in 'banana'\n```\n\nYou can use comparison operators to compare two string:\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nfruit == 'banana'\n```\n\nYou can use `>` and `<` to find alphabetical order.\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n\"apple\" > \"Banana\"\n```\n\n## Parsing text\n\nYou can use Python to find and extract a specific portion of text from a longer string. For example, find a domain address in an email:\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\ndata = 'From marcin.bartosiak@unipv.it Sat Apr  19 09:14:16 2020'\n```\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n#find position of the @ sign\natpos = data.find('@')\nprint(atpos)\n```\n\n::: {.callout-warning} \nPay attention to syntax: variable.function()\n:::\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n#find position of the first space after the @\nsppos = data.find(' ',atpos)\nprint(sppos)\n```\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n#find the hosting address\nhost = data[atpos+1:sppos]\nprint(host)\n```\n\n## Format operator\n\nThe format operator, `%` allows us to construct strings, replacing parts of the strings with the data stored in variables.  \n- `%d` - integer\n- `%g` - floating-point number\n- `%s` - string\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\ncity = \"Pavia\"\n\nprint(\"University of %s\" % city)\n```\n\nYou can use multiple values too. \n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nyear = 2025\nprint(\"Today is March %drd, %d. We are in %s.\" % (5, year, city))\n```\n\n\n```{pyodide}\n#| autorun: false\n#| startover: false\n#| min-lines: 3\n#| completion: true\n#Extra practice chunk\n\n```\n\n\n::: disclaimer\n<p><strong>Images and GIFs Disclaimer:</strong> Some of the images and GIFs used on this website are not owned by me. They are used for educational and illustrative purposes only. All rights belong to their respective owners. If you believe any content violates copyright, please contact me for prompt removal.</p>\n:::\n\n```{=html}\n<style>\n.disclaimer {\n  font-size: 0.8em;\n  color: #666;\n  border-top: 1px solid #ddd;\n  padding-top: 10px;\n  margin-top: 20px;\n}\n</style>\n```\n\n```{=html}\n<div>\n  {{< include footer.html >}}\n</div>\n```\n","srcMarkdownNoYaml":"\n\n```{=html}\n<style>\n/* Target the first tab (Demo) */\n.nav-pills .nav-item:nth-child(1) .nav-link {\n  background-color: #FFC20A; /* Yellow */\n  color: white;\n}\n\n/* Target the second tab (Example) */\n.nav-pills .nav-item:nth-child(2) .nav-link {\n  background-color: #5D3A9B; /* Purple */\n  color: white;\n}\n\n/* Target the third tab (Exercise) */\n.nav-pills .nav-item:nth-child(3) .nav-link {\n  background-color: #0C7BDC; /* Blue */\n  color: white;\n}\n\n/* Target the fourth tab (Activity) */\n.nav-pills .nav-item:nth-child(4) .nav-link {\n  background-color: #E66100; /* Orange */\n  color: white;\n}\n\n/* Target the fifth tab (Activity2) */\n.nav-pills .nav-item:nth-child(5) .nav-link {\n  background-color: #40B0A6; /* teal */\n  color: white;\n}\n\n/* Active tab styling */\n.nav-pills .nav-link.active {\n  background-color: #2E7D32; /* Customize active tab color */\n  color: white;\n}\n</style>\n```\n\n{{< include ./_extensions/r-wasm/live/_knitr.qmd >}} {{< include ./_extensions/r-wasm/live/_gradethis.qmd >}}\n\n```{pyodide}\n#| autorun: true\n#| startover: false\n#| edit: false\n#| runbutton: false\n#| echo: false\nimport sys\nfrom io import StringIO\n\n```\n\n# 4. Strings\n\nA string is a sequence of characters. You can access the characters one at a time with the bracket operator:\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nfruit = 'banana'\nletter = fruit[1]\n```\n\nThe expression in brackets is called an **index**.\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nprint(letter)\n```\n\nKeep in mind that in Python, the index is an offset from the beginning of the string, and the offset of the first letter is zero.  \n\n::: {.callout-warning} \nRemember that the value of the index has to be an integer!\n:::\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nletter = fruit[1.5]\n```\n\n## Length of strings\n\nTo get a length of a string, you can use function len()\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nlen(fruit)\n```\n\nTo find the last element of a sequence, remember about starting from 0!!!\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nlength = len(fruit)\n\nlastWrong = fruit[length] \n```\n\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nlastCorrect = fruit[length-1] \n\nprint(lastCorrect)\n```\n\n## String slices\n\nA segment of a string is called a slice. Selecting a slice is similar to selecting a character:\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nprint(fruit[3:6])\n```\n\nIf you omit the first index (before the colon), the slice starts at the beginning of the string. If you omit the second index, the slice goes to the end of the string:\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nfruit[:3]\n```\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nfruit[3:]\n```\n\nIf the first index is greater than or equal to the second the result is an empty string, represented by two quotation marks:\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nfruit[3:3]\n```\n\n## String comparison\n\nThe word `in` is a boolean operator that takes two strings and returns True if the first appears as a substring in the second:\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n'a' in 'banana'\n```\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n'seed' in 'banana'\n```\n\nYou can use comparison operators to compare two string:\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nfruit == 'banana'\n```\n\nYou can use `>` and `<` to find alphabetical order.\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n\"apple\" > \"Banana\"\n```\n\n## Parsing text\n\nYou can use Python to find and extract a specific portion of text from a longer string. For example, find a domain address in an email:\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\ndata = 'From marcin.bartosiak@unipv.it Sat Apr  19 09:14:16 2020'\n```\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n#find position of the @ sign\natpos = data.find('@')\nprint(atpos)\n```\n\n::: {.callout-warning} \nPay attention to syntax: variable.function()\n:::\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n#find position of the first space after the @\nsppos = data.find(' ',atpos)\nprint(sppos)\n```\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n#find the hosting address\nhost = data[atpos+1:sppos]\nprint(host)\n```\n\n## Format operator\n\nThe format operator, `%` allows us to construct strings, replacing parts of the strings with the data stored in variables.  \n- `%d` - integer\n- `%g` - floating-point number\n- `%s` - string\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\ncity = \"Pavia\"\n\nprint(\"University of %s\" % city)\n```\n\nYou can use multiple values too. \n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nyear = 2025\nprint(\"Today is March %drd, %d. We are in %s.\" % (5, year, city))\n```\n\n\n```{pyodide}\n#| autorun: false\n#| startover: false\n#| min-lines: 3\n#| completion: true\n#Extra practice chunk\n\n```\n\n\n::: disclaimer\n<p><strong>Images and GIFs Disclaimer:</strong> Some of the images and GIFs used on this website are not owned by me. They are used for educational and illustrative purposes only. All rights belong to their respective owners. If you believe any content violates copyright, please contact me for prompt removal.</p>\n:::\n\n```{=html}\n<style>\n.disclaimer {\n  font-size: 0.8em;\n  color: #666;\n  border-top: 1px solid #ddd;\n  padding-top: 10px;\n  margin-top: 20px;\n}\n</style>\n```\n\n```{=html}\n<div>\n  {{< include footer.html >}}\n</div>\n```\n"},"formats":{"live-html":{"identifier":{"display-name":"HTML","target-format":"live-html","base-format":"html","extension-name":"live"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"shortcodes":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["C:\\Users\\admin\\OneDrive\\Working\\Teaching\\Coding\\python_session4\\_extensions\\r-wasm\\live\\live.lua"],"output-file":"completed.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","ojs-engine":true,"revealjs-plugins":[],"editor":"visual","draft-mode":"gone","drafts":["p5-strings-solved.qmd","challenge2-strings_solved.qmd"],"title":"4. Strings","author":"Dr. Piccoli","pyodide":{"packages":["seaborn"]},"editor_options":{"chunk_output_type":"console"}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}