{
  "hash": "95853de688da7040545c68b5decbc02a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"4. Strings Practice - Solution\"\ndraft: true\nauthor: \"Dr. Piccoli\"\nformat: live-html\npyodide:\n  packages:\n    - seaborn\neditor_options: \n  chunk_output_type: console\n---\n\n```{=html}\n<style>\n/* Target the first tab (Demo) */\n.nav-pills .nav-item:nth-child(1) .nav-link {\n  background-color: #FFC20A; /* Yellow */\n  color: white;\n}\n\n/* Target the second tab (Example) */\n.nav-pills .nav-item:nth-child(2) .nav-link {\n  background-color: #5D3A9B; /* Purple */\n  color: white;\n}\n\n/* Target the third tab (Exercise) */\n.nav-pills .nav-item:nth-child(3) .nav-link {\n  background-color: #0C7BDC; /* Blue */\n  color: white;\n}\n\n/* Target the fourth tab (Activity) */\n.nav-pills .nav-item:nth-child(4) .nav-link {\n  background-color: #E66100; /* Orange */\n  color: white;\n}\n\n/* Target the fifth tab (Activity2) */\n.nav-pills .nav-item:nth-child(5) .nav-link {\n  background-color: #40B0A6; /* teal */\n  color: white;\n}\n\n/* Active tab styling */\n.nav-pills .nav-link.active {\n  background-color: #2E7D32; /* Customize active tab color */\n  color: white;\n}\n</style>\n```\n\n::: {.cell}\n\n:::\n\n::: {.cell autorun='true' startover='false' edit='false' runbutton='false'}\n```{pyodide}\n#| autorun: true\n#| startover: false\n#| edit: false\n#| runbutton: false\n#| echo: false\nimport sys\nfrom io import StringIO\n\n```\n:::\n\n\n\n\n\n1) **Title Fixer:** You receive a list of messy book titles like [\"tHe gReaT GaTsBy\", \"cAtcHer in the rYe\"]. Write a function that returns each title with only the first letter capitalized and the rest in lowercase. \n\n**Tip:** Use `str.capitalize()`\n\n\n\n\n\n::: {.cell persist='true' autorun='false' min-lines='3'}\n```{pyodide}\n#| persist: true\n#| autorun: false\n#| min-lines: 3\nmock_input = StringIO(\"...\\n\")\nsys.stdin = mock_input\n```\n:::\n\n::: {.cell persist='true' startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| persist: true\n#| startover: false\n#| autorun: false\n#| min-lines: 3\ntitles = input()\ntitles = titles.split(\", \")\nfor title in titles:\n  fixed = title.capitalize()\n  print(fixed)\n\n```\n:::\n\n\n\n\n\n**Alternative solution**\n\n\n\n\n::: {.cell persist='true' startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| persist: true\n#| startover: false\n#| autorun: false\n#| min-lines: 3\ntitles = [\"tHe gReaT GaTsBy, cAtcHer in the rYe, I malaVOglia\\n\"]\nfor title in titles:\n  fixed = title.capitalize()\n  print(fixed)\n\n```\n:::\n\n\n\n\n\n2) **Centered Banner Generator:** Create a function that takes a word and prints it as a banner, centered in a width of 30 using * as the fill character. \n\n**Tip:** Use `str.center(width[, fillchar])` \n\n\n\n\n\n::: {.cell persist='true' autorun='false' min-lines='3'}\n```{pyodide}\n#| persist: true\n#| autorun: false\n#| min-lines: 3\nmock_input = StringIO(\"malaVOglia\\n\")\nsys.stdin = mock_input\n```\n:::\n\n::: {.cell persist='true' startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| persist: true\n#| startover: false\n#| autorun: false\n#| min-lines: 3\ndef centerBanner(text):\n  return text.center(30, \"*\")\n  \nword = input()\ntitle = centerBanner(word)\nprint(title)\n```\n:::\n\n\n\n\n\n3) **File Filter:** Given a list of filenames, print only those that end with .jpg or .png with an appropriate message. \n\n**Tip:** Use `str.endswith(suffix[, start[, end]])` \n\n\n\n\n\n::: {.cell persist='true' startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| persist: true\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n\ndef show_image_files(filenames):\n    for name in filenames:\n        if name.endswith(('.jpg', '.png')):\n            print(name)\n\nfiles = [\"photo.jpg\", \"document.pdf\", \"image.png\", \"notes.txt\"]\n\nshow_image_files(files)\n```\n:::\n\n\n\n\n\n4) **Clean-Up on the Left:** You’re given strings like `\"---Warning!\"` or `\"***Important Notice\"`. Strip out all leading special characters (-, *, etc.) and return the cleaned string. \n\n**Tip:** Use `str.lstrip([chars])` \n\n\n\n\n\n::: {.cell persist='true' autorun='false' min-lines='3'}\n```{pyodide}\n#| persist: true\n#| autorun: false\n#| min-lines: 3\nmock_input = StringIO(\"***Important Notice, NOTE, ---Warning!\\n\")\nsys.stdin = mock_input\n```\n:::\n\n::: {.cell persist='true' startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| persist: true\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n\ndef clean_left(text):\n    cleaned_text = text.lstrip(\"-*\")\n    return cleaned_text\n\nwarnings = input()\nfor warning in warnings.split(\", \"):\n  print(clean_left(warning))\n\n```\n:::\n\n\n\n\n\n5) **Censorship Machine:** Censor any inappropriate words in a user input string (e.g., replace `\"darn\"` with `\"****\"`). Optionally, only replace the first occurrence. \n\n**Tip:** Use `str.replace(old, new[, count])` \n\n\n\n\n\n::: {.cell persist='true' autorun='false' min-lines='3'}\n```{pyodide}\n#| persist: true\n#| autorun: false\n#| min-lines: 3\nmock_input = StringIO(\"This is a fooking mess. Darn it! Shooot, what a fook! Darn fook fooking shooot.\\n\")\nsys.stdin = mock_input\n```\n:::\n\n::: {.cell persist='true' startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| persist: true\n#| startover: false\n#| autorun: false\n#| min-lines: 3\ndef censor_text(text):\n  bad_words = [\"darn\", \"fook\", \"fooking\", \"shooot\"]\n  words = text.split()   \n  for word in words:\n    if word.strip('.,;:!?').lower() in bad_words:\n      bleep = \"*\" * len(word)\n      text = text.replace(word, bleep)\n  return text\n\ninp = input()\nclean_message = censor_text(inp)\nprint(clean_message)\n```\n:::\n\n\n\n\n\n6) **Letter counter:** A secret message is sent with random capitalizations by the zodiac killer. You need to count the number of \"k\" and \"m\" (for kill and murder) in the text. It does not matter if they are capitalized or not, any occurrence of the letter needs to be counted. Use the functions you deem best for the job. \n\n\n\n\n\n\n::: {.cell persist='true' autorun='false' min-lines='3'}\n```{pyodide}\n#| persist: true\n#| autorun: false\n#| min-lines: 3\nmock_input = StringIO(\"K...k...M...m...KaBoom. Must Kill Many More.\\n\")\nsys.stdin = mock_input\n```\n:::\n\n::: {.cell persist='true' startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| persist: true\n#| startover: false\n#| autorun: false\n#| min-lines: 3\ndef count_letter(text, letter):\n    text = text.lower()\n    letter = letter.lower()\n    count = text.count(letter)\n    print(\"Number of '%s': %d\" % (letter, count))\n\nmessage = input()\nletters = [\"k\", \"m\"]\nfor letter in letters:\n  count_letter(message, letter)\n```\n:::\n\n\n\n\n\n7) **Shouting Bot:** Make a function that takes a sentence and “shouts” it in all caps, adding three exclamation points at the end. \n\n\n\n\n\n::: {.cell persist='true' autorun='false' min-lines='3'}\n```{pyodide}\n#| persist: true\n#| autorun: false\n#| min-lines: 3\nmock_input = StringIO(\"K...k...M...m...KaBoom. Must Kill Many More.\\n\")\nsys.stdin = mock_input\n```\n:::\n\n::: {.cell persist='true' startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| persist: true\n#| startover: false\n#| autorun: false\n#| min-lines: 3\ndef shouter_bot(text):\n    shouted_text = text.upper() + \"!!!\"\n    return shouted_text\n\nmessage = input() \nprint(shouter_bot(message))\n```\n:::\n\n\n\n\n\n8)  **Find and slice.** Use find and string slicing to extract the portion of the string after the colon character and then use the float function to convert the extracted string into a floating point number.\n\n    In the second cell below, generalize this algorithm. It should loop through the three strings provided in input and ensure that there is a \":\" before extracting, converting and printing the number.\n\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# Here we create the algorithm for a single input\nstring = 'X-DSPAM-Confidence:0.8475'\n\nif \":\" in string :\n    pos = string.find(\":\")\n    number = float(string[pos+1: ])\n    print(number)\nelse: \n    print(\"We could not find the ':' symbol\")\n```\n:::\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# Generalize and replicate the above program for a list of strings in input\nstrings = ['X-DSPAM-Confidence:0.8475', 'no colon here', 'X-DSPAM-Confidence:0.345']\n\nfor string in strings :\n    if \":\" in string :\n        pos = string.find(\":\")\n        number = float(string[pos+1: ])\n        print(number)\n    else: \n        print(\"We could not find the ':' symbol\")\n```\n:::\n\n\n\n\n\n9)  **Middle five slicer:** Create a program that, collects user input until the user types \"done\".\n\n    Given any string in input will first check for the length of the string. If the string in less than 5 characters long, it prints the message \"Can't do anything with such a short string, try harder!\"\n\n    When the string is longer than 5 character, then the program will slice the string and only extract the middle five characters.\n    \n\n\n\n\n::: {.cell autorun='false' min-lines='3'}\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nmock_input = StringIO(\"hi\\nhello\\nYo! wasup bro\\ndone\\n\")\nsys.stdin = mock_input\n```\n:::\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# Collect first input and start the loop\ninp = input()\n\nwhile inp != 'done' :\n    string_length = len(inp)\n    if string_length > 4 :\n        starting = string_length // 2 - 2\n        print(inp[starting : starting + 5])\n    else:\n        # The escape character \\ within the string for illustration purposes\n        # Alternatively we could have simply used double quotes for the string:\n        # print(\"Can't do anything with such a short string, try harder!\")\n        print('Can\\'t do anything with such a short string, try harder!')\n        \n    inp = input()\n    \nprint('Thanks for playing with us!')\n```\n:::\n\n\n\n\n\n10) **Vowels delete:**  Create a program that, collects user input until the user types \"done\".\n\n    For each string in input, first, strip any white space at the beginning or the end of the string. Then delete all the vowels from the string and print the resulting string.\n\n\n\n\n\n::: {.cell autorun='false' min-lines='3'}\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nmock_input = StringIO(\"hi\\nhello\\nYo! wasup bro\\ndone\\n\")\nsys.stdin = mock_input\n```\n:::\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# Collect first input and start the loop\ninp = input()\n\nwhile inp != 'done' :\n    text = inp.strip()\n    for vowel in ['a', 'e', 'i', 'o', 'u'] :\n        text = text.replace(vowel, \"\")\n    print('Your input string with no vowels is: ', text)\n    inp = input()\n   \nprint('Thanks for playing with us!')\n```\n:::\n\n\n\n\n\n\n11) **Count Vowels in a String** Create a function `count_vowels(text)` that counts the number of vowels (a, e, i, o, u) in a given string. Use a for loop and conditional statements to accomplish the task.\n\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# Function to count vowels in a string\ndef count_vowels(text):\n  vowels = \"aeiou\"\n  vowels = vowels + vowels.upper()\n  count = 0\n  for char in text:  # Loop through each character in the string\n    if char in vowels:\n      count += 1\n  return count  # Return the total count of vowels\n\ntext = \"Hello Out There World\"\nprint(\"Number of vowels in the text:\", count_vowels(text))\n```\n:::\n\n\n\n\n\n\n12) **Password Strength Checker**\nWrite a function `check_password_strength(password)` that evaluates a password. Then test it on three passwords of your choice. The rules are:\n* If it's less than 6 characters → \"Weak\"\n* If it's between 6-10 characters → \"Moderate\"\n* If it's more than 10 characters → \"Strong\"\n\n\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# Function to check password strength\ndef check_password_strength(password):\n  if len(password) < 6:\n    return \"Weak\"\n  elif 6 <= len(password) <= 10:\n    return \"Moderate\"\n  else:\n    return \"Strong\"\n\n# List of passwords to test\npasswords = [\"abc\", \"myp@ss1\", \"SuperSecurePassword123\"]\n\n# Loop through the list and test each password\nfor password in passwords:\n  print(\"Password:\", password, \"-> Strength:\", check_password_strength(password))\n```\n:::\n",
    "supporting": [
      "p5-strings-solved_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}