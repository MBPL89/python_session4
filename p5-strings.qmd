---
title: "4. Strings Practice"
author: "Dr. Piccoli"
format: live-html
pyodide:
  packages:
    - seaborn
editor_options: 
  chunk_output_type: console
---

```{=html}
<style>
/* Target the first tab (Demo) */
.nav-pills .nav-item:nth-child(1) .nav-link {
  background-color: #FFC20A; /* Yellow */
  color: white;
}

/* Target the second tab (Example) */
.nav-pills .nav-item:nth-child(2) .nav-link {
  background-color: #5D3A9B; /* Purple */
  color: white;
}

/* Target the third tab (Exercise) */
.nav-pills .nav-item:nth-child(3) .nav-link {
  background-color: #0C7BDC; /* Blue */
  color: white;
}

/* Target the fourth tab (Activity) */
.nav-pills .nav-item:nth-child(4) .nav-link {
  background-color: #E66100; /* Orange */
  color: white;
}

/* Target the fifth tab (Activity2) */
.nav-pills .nav-item:nth-child(5) .nav-link {
  background-color: #40B0A6; /* teal */
  color: white;
}

/* Active tab styling */
.nav-pills .nav-link.active {
  background-color: #2E7D32; /* Customize active tab color */
  color: white;
}
</style>
```

{{< include ./_extensions/r-wasm/live/_knitr.qmd >}} {{< include ./_extensions/r-wasm/live/_gradethis.qmd >}}

```{pyodide}
#| autorun: true
#| startover: false
#| edit: false
#| runbutton: false
#| echo: false
import sys
from io import StringIO

```

1)  Find and slice. Use find and string slicing to extract the portion of the string after the colon character and then use the float function to convert the extracted string into a floating point number.

    In the second cell below, generalize this algorithm. It should loop through the three strings provided in input and ensure that there is a ":" before extracting, converting and printing the number.

```{pyodide}
#| persist: true
#| startover: false
#| autorun: false
#| min-lines: 3

```

```{pyodide}
#| persist: true
#| startover: false
#| autorun: false
#| min-lines: 3

```

2)  Create a program that, collects user input until the user types "done".

    Given any string in input will first check for the length of the string. If the string in less than 5 characters long, it prints the message "Can't do anything with such a short string, try harder!"

    When the string is longer than 5 character, then the program will slice the string and only extract the middle five characters.

```{pyodide}
#| persist: true
#| autorun: false
#| min-lines: 3
mock_input = StringIO("...\n...\n")
sys.stdin = mock_input
```

```{pyodide}
#| persist: true
#| startover: false
#| autorun: false
#| min-lines: 3

```

3)  Create a program that, collects user input until the user types "done".

    For each string in input, first, strip any white space at the beginning or the end of the string. Then delete all the vowels from the string and print the resulting string.

```{pyodide}
#| persist: true
#| startover: false
#| autorun: false
#| min-lines: 3

```

4) **Count Vowels in a String** Create a function `count_vowels(text)` that counts the number of vowels (a, e, i, o, u) in a given string. Use a for loop and conditional statements to accomplish the task.

```{pyodide}
#| persist: true
#| startover: false
#| autorun: false
#| min-lines: 3


```

5) **Password Strength Checker**
Write a function `check_password_strength(password)` that evaluates a password. Then test it on three passwords of your choice. The rules are:
* If it's less than 6 characters → "Weak"
* If it's between 6-10 characters → "Moderate"
* If it's more than 10 characters → "Strong"


```{pyodide}
#| persist: true
#| startover: false
#| autorun: false
#| min-lines: 3

```